Test Requirements

Database Design:

Design a relational database schema to store information about books.
Create tables for storing book details.
CRUD Operations:

Add New Books: Implement functionality to add new books to the inventory.
Filter Books: Implement functionality to filter books based on criteria such as title, author, genre, and publication date.
Export Data: Implement functionality to export the book data in a commonly used format like CSV or JSON.
User Interface:

Create a simple user interface for interacting with the inventory system.
Ensure the UI is intuitive and user-friendly.
Detailed Tasks

1. Schema Design: Create a table named "Inventory" with the following columns:

Entry ID
Title
Author
Genre
Publication Date
ISBN
2. Database Setup:

Use a relational database management system (RDBMS) like MySQL, PostgreSQL, or SQLite.

Provide SQL scripts or database schema files for setting up the database.

3. Add New Books:

Implement a form or UI component to add new book entries to the database.

Validate input data (e.g., ISBN format, non-empty fields).

Implement filtering functionality based on various criteria (e.g., title, author, genre).

Provide a search form or UI component to input filter criteria.

Display filtered results in a user-friendly format (e.g., table or list).

4. Export Data:

Implement functionality to export the book inventory data.

Allow export in CSV or JSON format.

Provide an option for users to download the exported file.

User Interface

5. UI Components:

Add Book Form: A form to input details of new books.
Filter Form: A form or controls to filter books based on criteria.
Books List: A table or list to display book details.
Export Button: A button or link to trigger the export functionality.
6. Design Considerations:

Ensure that the interface is responsive and works well on different screen sizes.
Implement basic styling to make the UI aesthetically pleasing.
Evaluation Criteria

7. Database Design:

Correctness and efficiency of the schema.
Proper use of data types and constraints.
8. CRUD Operations:

Functionality: All required operations (add, filter, export) should work as specified.
Code Quality: Clean, maintainable, and well-documented code.
Error Handling: Proper handling of invalid inputs and edge cases.
9. User Interface:

Usability: The UI should be easy to navigate and use.
Design: The design should be clean and visually appealing.
Responsiveness: The interface should work well on different devices.
Submission Requirements

Source Code:

Provide the complete source code of the project, including database scripts and UI files.
Include instructions for setting up and running the project.
Documentation:

Brief documentation explaining how to use the system.
Include any design decisions or challenges faced during development.
Demo (Mandatory):

A short video or live demo showcasing the functionality of the system.